LINK   :  https://chat.openai.com/share/6d2400ad-4c39-46dc-a98a-975a356b1577


class Solution {
    public List<List<Integer>> permute(int[] nums) {
                List<List<Integer>> permutations = new ArrayList<>();
        backtrack(nums, new ArrayList<>(), new boolean[nums.length], permutations);
        return permutations;
    }

    private void backtrack(int[] nums, List<Integer> path, boolean[] used, List<List<Integer>> permutations) {
        if (path.size() == nums.length) {
            permutations.add(new ArrayList<>(path));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (!used[i]) {
                path.add(nums[i]);
                used[i] = true;
                backtrack(nums, path, used, permutations);
                path.remove(path.size() - 1);
                used[i] = false;
            }
        }
    }
}
